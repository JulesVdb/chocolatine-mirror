name: Chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: ${{ secrets.MIRROR_URL }}
  SSH_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Check Mirror Repository
        run: |
          if [ "${{ github.event.repository.is_mirror }}" = "true" ]; then
            echo "This repository is a mirror. Exiting early."
            exit 1
          fi

  check_coding_style:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Run Coding Style Checker
        run: |
          check.sh $(pwd) $(pwd)
      - name: Create Annotations for Style Errors
        run: |
          if [ -f coding-style-reports.log ]; then
            while IFS= read -r line; do
              file=$(echo "$line" | cut -d':' -f1)
              line_number=$(echo "$line" | cut -d':' -f2)
              error_type=$(echo "$line" | cut -d':' -f3 | xargs)
              error_message=$(echo "$line" | cut -d':' -f4-)
              echo "::error title=$error_type coding style error in $file at line $line_number::$error_message"
            done < coding-style-reports.log
          fi
      - name: Fail if Style Errors Found
        run: |
          error_count=$(wc -l < coding-style-reports.log 2>/dev/null || echo 0)
          if [ "$error_count" -gt 0 ]; then
            echo "Style errors detected: $error_count"
            exit 1
          fi

  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Compile the Program
        run: make
        timeout-minutes: 2
      - name: Clean Compilation
        run: make clean
      - name: Verify Executable Exists and is Executable
        run: |
          cd "$GITHUB_WORKSPACE"
          EXECUTABLE=$(grep -E '^NAME\s*=' Makefile | sed -E 's/^NAME\s*=\s*//')
          if [ -z "$EXECUTABLE" ]; then
            echo "No executable name found in Makefile."
            exit 1
          fi
          echo "Detected executable: $EXECUTABLE"
          if [ ! -x "$EXECUTABLE" ]; then
            echo "Executable '$EXECUTABLE' not found or not executable."
            exit 1
          fi

  run_tests:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Run Tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Mirror Repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
